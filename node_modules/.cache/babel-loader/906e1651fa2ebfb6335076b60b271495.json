{"ast":null,"code":"var _jsxFileName = \"/Users/ketanrikame/Desktop/weather-today/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { Route } from 'react-router-dom';\nimport './App.css';\nconst google = window.google;\n\nconst App = () => {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     monsters:[],\n  //     lat:'',\n  //     lon:'',\n  //     searchField: '',\n  //     appId:'9b66a9c4055d9d1f99e3bdcdd1dbfa69',\n  //     weeklyData:[],\n  //     options : {\n  //       chart: {\n  //         type: 'spline'\n  //       },\n  //       title: {\n  //         text: 'My chart'\n  //       },\n  //       series: [\n  //         {\n  //           data: [1, 2, 1, 4, 3, 6]\n  //         }\n  //       ]\n  //     }\n  //   };\n  //   this.autocompleteInput = React.createRef();\n  //   this.autocomplete = null;\n  //   //this.handlePlaceChanged = this.handlePlaceChanged.bind(this);\n  //   //this.getWeather = this.getWeather.bind(this);\n  //   const google = window.google;\n  // }\n  const [lat, setLat] = useState('');\n  const [lon, setLon] = useState('');\n  const [appId, setAppid] = useState('9b66a9c4055d9d1f99e3bdcdd1dbfa69');\n  const [weeklyData, setWeeklyData] = useState([]);\n  const options = {\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: 'My chart'\n    },\n    series: [{\n      data: [1, 2, 1, 4, 3, 6]\n    }]\n  };\n  this.autocompleteInput = React.createRef();\n  this.autocomplete = null;\n  const google = window.google;\n  useEffect(() => {\n    this.autocomplete = new google.maps.places.Autocomplete(this.autocompleteInput.current, {\n      \"types\": [\"geocode\"]\n    });\n    this.autocomplete.addListener('place_changed', this.handlePlaceChanged);\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({\n      monsters: users\n    }));\n\n    if (\"geolocation\" in navigator) {\n      //document.getElementById(\"loader\").style.display = \"block\";\n      //document.getElementById(\"myDiv\").style.opacity = \"0.1\";\n      navigator.geolocation.getCurrentPosition(position => {\n        setLat(position.coords.latitude);\n        setLat(position.coords.longitude);\n        getWeather(); // this.setState({lat:position.coords.latitude,lon:position.coords.longitude},() => {this.getWeather();});\n      }, error => {\n        console.log('location1');\n        axios.get('http://ip-api.com/json').then(response => {\n          // this.setState({lat:response.data.lat,lon:response.data.lon},() => {this.getWeather();});\n          setLat(response.data.lat);\n          setLat(response.data.lon);\n          getWeather();\n        });\n      });\n    } else {\n      // fetch(\"http://ip-api.com/json\")\n      // .then(response => response.json())\n      // .then(json => this.setState({location:json}));\n      console.log('location');\n      axios.get('http://ip-api.com/json').then(response => {\n        // this.setState({lat:response.data.lat,lon:response.data.lon},() => {this.getWeather();});\n        setLat(response.data.lat);\n        setLat(response.data.lon);\n        getWeather();\n      });\n    }\n  }, []);\n\n  getWeather = () => {\n    const lat = this.state.lat;\n    const lon = this.state.lon;\n    const appId = this.state.appId; // axios\n    // .get(\n    //   \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n    //     lat+\n    //     \"&lon=\" +\n    //    lon +\n    //     \"&APPID=\" +\n    //     appId+ \"&units=metric\"\n    // )\n\n    axios.get(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + lat + \"&lon=\" + lon + \"&exclude=hourly\" + \"&APPID=\" + appId + \"&units=metric\").then(response => {\n      this.setState({\n        weeklyData: response.data.daily\n      });\n    });\n  };\n\n  handlePlaceChanged = () => {\n    const place = this.autocomplete.getPlace();\n    const lat = place.geometry.location.lat();\n    const lon = place.geometry.location.lng();\n    const appId = this.state.appId;\n    console.log('p', lat, lon);\n    axios.get(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + lat + \"&lon=\" + lon + \"&exclude=hourly\" + \"&APPID=\" + appId + \"&units=metric\").then(response => {\n      this.setState({\n        weeklyData: response.data.daily\n      });\n    });\n  }; // const { monsters, searchField } = this.state;\n  // const filteredMonsters = monsters.filter(monster =>\n  //   monster.name.toLowerCase().includes(searchField.toLowerCase())\n  // );\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, \"Monsters Rolodex\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-map-marker-alt\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    ref: this.autocompleteInput,\n    id: \"autocomplete\",\n    placeholder: \"Enter city name\",\n    type: \"text\",\n    className: \"searchBar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    class: \"fas fa-search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 10\n    }\n  })), /*#__PURE__*/React.createElement(CardList, {\n    weeklyData: this.state.weeklyData,\n    lat: this.state.lat,\n    lon: this.state.lon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(HighchartsReact, {\n    highcharts: Highcharts,\n    options: this.state.options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/ketanrikame/Desktop/weather-today/src/App.js"],"names":["React","useState","useEffect","axios","Highcharts","HighchartsReact","CardList","SearchBox","Route","google","window","App","lat","setLat","lon","setLon","appId","setAppid","weeklyData","setWeeklyData","options","chart","type","title","text","series","data","autocompleteInput","createRef","autocomplete","maps","places","Autocomplete","current","addListener","handlePlaceChanged","fetch","then","response","json","users","setState","monsters","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getWeather","error","console","log","get","state","daily","place","getPlace","geometry","location","lng"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { Route } from 'react-router-dom';\n\nimport './App.css';\nconst google = window.google;\n\nconst App = () => {\n  // constructor() {\n  //   super();\n\n  //   this.state = {\n  //     monsters:[],\n  //     lat:'',\n  //     lon:'',\n  //     searchField: '',\n  //     appId:'9b66a9c4055d9d1f99e3bdcdd1dbfa69',\n  //     weeklyData:[],\n  //     options : {\n  //       chart: {\n  //         type: 'spline'\n  //       },\n  //       title: {\n  //         text: 'My chart'\n  //       },\n  //       series: [\n  //         {\n  //           data: [1, 2, 1, 4, 3, 6]\n  //         }\n  //       ]\n  //     }\n  //   };\n  //   this.autocompleteInput = React.createRef();\n  //   this.autocomplete = null;\n  //   //this.handlePlaceChanged = this.handlePlaceChanged.bind(this);\n  //   //this.getWeather = this.getWeather.bind(this);\n  //   const google = window.google;\n\n  // }\n  const [lat,setLat] = useState('');\n  const [lon,setLon] = useState('');\n  const [appId,setAppid] = useState('9b66a9c4055d9d1f99e3bdcdd1dbfa69');\n  const [weeklyData,setWeeklyData] = useState([]);\n  const options = {\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: 'My chart'\n    },\n    series: [\n      {\n        data: [1, 2, 1, 4, 3, 6]\n      }\n    ]\n  };\n  this.autocompleteInput = React.createRef();\n  this.autocomplete = null;\n  const google = window.google;\n\n\n  useEffect(() => {\n    this.autocomplete = new google.maps.places.Autocomplete(this.autocompleteInput.current,\n      {\"types\": [\"geocode\"]});\n\n  this.autocomplete.addListener('place_changed', this.handlePlaceChanged);\n    fetch('https://jsonplaceholder.typicode.com/users')\n     .then(response => response.json())\n    .then(users => this.setState({ monsters: users }));\n    \n\n      if (\"geolocation\" in navigator) { \n        //document.getElementById(\"loader\").style.display = \"block\";\n        //document.getElementById(\"myDiv\").style.opacity = \"0.1\";\n       navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setLat(position.coords.latitude);\n          setLat(position.coords.longitude);\n          getWeather();\n          // this.setState({lat:position.coords.latitude,lon:position.coords.longitude},() => {this.getWeather();});\n        },\n        (error) => {\n          console.log('location1')\n          axios.get('http://ip-api.com/json')\n          .then(response => {\n            // this.setState({lat:response.data.lat,lon:response.data.lon},() => {this.getWeather();});\n            setLat(response.data.lat);\n            setLat(response.data.lon);\n            getWeather();\n          })\n\n        }\n      );\n      } else {\n        // fetch(\"http://ip-api.com/json\")\n        // .then(response => response.json())\n        // .then(json => this.setState({location:json}));\n        console.log('location')\n        axios.get('http://ip-api.com/json')\n        .then(response => {\n          // this.setState({lat:response.data.lat,lon:response.data.lon},() => {this.getWeather();});\n          setLat(response.data.lat);\n          setLat(response.data.lon);\n          getWeather();\n        })\n      }\n  \n    \n  },[]);\n\n  getWeather = () => {\n    const lat = this.state.lat\n    const lon = this.state.lon\n    const appId = this.state.appId\n    // axios\n    // .get(\n    //   \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n    //     lat+\n    //     \"&lon=\" +\n    //    lon +\n    //     \"&APPID=\" +\n    //     appId+ \"&units=metric\"\n    // )\n    axios\n    .get(\n      \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n        lat+\n        \"&lon=\" +\n       lon + \"&exclude=hourly\"+\n        \"&APPID=\" +\n        appId + \"&units=metric\"\n    ).then(response =>{\n      this.setState({weeklyData:response.data.daily});\n    })\n    \n  }\n\n  handlePlaceChanged = () => {\n    const place = this.autocomplete.getPlace();\n   const lat = place.geometry.location.lat()\n   const lon = place.geometry.location.lng();\n   const appId = this.state.appId\n    console.log('p',lat,lon)\n    axios\n    .get(\n      \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n        lat+\n        \"&lon=\" +\n       lon + \"&exclude=hourly\"+\n        \"&APPID=\" +\n        appId + \"&units=metric\"\n    ).then(response =>{\n      this.setState({weeklyData:response.data.daily});\n    })\n  }\n\n \n\n  \n    // const { monsters, searchField } = this.state;\n    // const filteredMonsters = monsters.filter(monster =>\n    //   monster.name.toLowerCase().includes(searchField.toLowerCase())\n    // );\n\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        {/* <SearchBox onSearchChange={this.onSearchChange} /> */}\n        {/* <i className='fa fa-home'></i> */}\n        <div className=\"input-div\">\n        <i className=\"fas fa-map-marker-alt\"></i>\n                <input ref={this.autocompleteInput}  id=\"autocomplete\" placeholder=\"Enter city name\"\n         type=\"text\" className=\"searchBar\"></input>\n         <i class=\"fas fa-search\"></i>\n         </div>\n        <CardList weeklyData={this.state.weeklyData} lat={this.state.lat} lon={this.state.lon}/>\n        <div>\n    <HighchartsReact highcharts={Highcharts} options={this.state.options} />\n  </div>\n      </div>\n    );\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}