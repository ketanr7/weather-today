{"ast":null,"code":"var _jsxFileName = \"/Users/ketanrikame/Desktop/weather-today/src/components/home/home.component.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { CardList } from \"../card-list/card-list.component\";\nimport \"./home.styles.css\";\nconst google = window.google;\n\nclass Home extends Component {\n  constructor() {\n    super();\n\n    this.getWeather = () => {\n      const lat = this.state.lat;\n      const lon = this.state.lon;\n      const appId = this.state.appId;\n      axios.get(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + lat + \"&lon=\" + lon + \"&exclude=hourly\" + \"&APPID=\" + appId + \"&units=metric\").then(response => {\n        this.setState({\n          weeklyData: response.data.daily\n        });\n      });\n    };\n\n    this.handlePlaceChanged = () => {\n      const place = this.autocomplete.getPlace();\n      const lat = place.geometry.location.lat();\n      const lon = place.geometry.location.lng();\n      this.setState({\n        city: place.address_components[0].long_name,\n        lat: place.geometry.location.lat(),\n        lon: place.geometry.location.lng()\n      });\n      const appId = this.state.appId;\n      axios.get(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + lat + \"&lon=\" + lon + \"&exclude=hourly\" + \"&APPID=\" + appId + \"&units=metric\").then(response => {\n        this.setState({\n          weeklyData: response.data.daily\n        });\n      });\n    };\n\n    this.onSearchChange = event => {\n      this.setState({\n        searchField: event.target.value\n      });\n    };\n\n    this.state = {\n      monsters: [],\n      lat: \"\",\n      lon: \"\",\n      city: \"Mumbai\",\n      searchField: \"\",\n      appId: \"9b66a9c4055d9d1f99e3bdcdd1dbfa69\",\n      weeklyData: [],\n      options: {\n        chart: {\n          type: \"spline\"\n        },\n        title: {\n          text: \"My chart\"\n        },\n        series: [{\n          data: [1, 2, 1, 4, 3, 6]\n        }]\n      }\n    };\n    this.autocompleteInput = React.createRef();\n    this.autocomplete = null;\n    const google = window.google;\n  }\n\n  componentDidMount() {\n    this.autocomplete = new google.maps.places.Autocomplete(this.autocompleteInput.current, {\n      types: [\"geocode\"]\n    });\n    this.autocomplete.addListener(\"place_changed\", this.handlePlaceChanged);\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()).then(users => this.setState({\n      monsters: users\n    }));\n\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        }, () => {\n          this.getWeather();\n        });\n      }, error => {\n        axios.get(\"http://ip-api.com/json\").then(response => {\n          this.setState({\n            lat: response.data.lat,\n            lon: response.data.lon\n          }, () => {\n            this.getWeather();\n          });\n        });\n      });\n    } else {\n      axios.get(\"http://ip-api.com/json\").then(response => {\n        this.setState({\n          lat: response.data.lat,\n          lon: response.data.lon\n        }, () => {\n          this.getWeather();\n        });\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }, \"Weather Today\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-map-marker-alt\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      ref: this.autocompleteInput,\n      id: \"autocomplete\",\n      placeholder: \"Enter city name\",\n      type: \"text\",\n      className: \"searchBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(CardList, {\n      weeklyData: this.state.weeklyData,\n      lat: this.state.lat,\n      lon: this.state.lon,\n      city: this.state.city,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/ketanrikame/Desktop/weather-today/src/components/home/home.component.jsx"],"names":["React","Component","axios","BrowserRouter","Router","Switch","Route","Link","Highcharts","HighchartsReact","CardList","google","window","Home","constructor","getWeather","lat","state","lon","appId","get","then","response","setState","weeklyData","data","daily","handlePlaceChanged","place","autocomplete","getPlace","geometry","location","lng","city","address_components","long_name","onSearchChange","event","searchField","target","value","monsters","options","chart","type","title","text","series","autocompleteInput","createRef","componentDidMount","maps","places","Autocomplete","current","types","addListener","fetch","json","users","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport { CardList } from \"../card-list/card-list.component\";\n\nimport \"./home.styles.css\";\nconst google = window.google;\n\nclass Home extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      lat: \"\",\n      lon: \"\",\n      city: \"Mumbai\",\n      searchField: \"\",\n      appId: \"9b66a9c4055d9d1f99e3bdcdd1dbfa69\",\n      weeklyData: [],\n      options: {\n        chart: {\n          type: \"spline\",\n        },\n        title: {\n          text: \"My chart\",\n        },\n        series: [\n          {\n            data: [1, 2, 1, 4, 3, 6],\n          },\n        ],\n      },\n    };\n    this.autocompleteInput = React.createRef();\n    this.autocomplete = null;\n\n    const google = window.google;\n  }\n\n  componentDidMount() {\n    this.autocomplete = new google.maps.places.Autocomplete(\n      this.autocompleteInput.current,\n      { types: [\"geocode\"] }\n    );\n\n    this.autocomplete.addListener(\"place_changed\", this.handlePlaceChanged);\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          this.setState(\n            { lat: position.coords.latitude, lon: position.coords.longitude },\n            () => {\n              this.getWeather();\n            }\n          );\n        },\n        (error) => {\n          axios.get(\"http://ip-api.com/json\").then((response) => {\n            this.setState(\n              { lat: response.data.lat, lon: response.data.lon },\n              () => {\n                this.getWeather();\n              }\n            );\n          });\n        }\n      );\n    } else {\n      axios.get(\"http://ip-api.com/json\").then((response) => {\n        this.setState(\n          { lat: response.data.lat, lon: response.data.lon },\n          () => {\n            this.getWeather();\n          }\n        );\n      });\n    }\n  }\n\n  getWeather = () => {\n    const lat = this.state.lat;\n    const lon = this.state.lon;\n    const appId = this.state.appId;\n\n    axios\n      .get(\n        \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n          lat +\n          \"&lon=\" +\n          lon +\n          \"&exclude=hourly\" +\n          \"&APPID=\" +\n          appId +\n          \"&units=metric\"\n      )\n      .then((response) => {\n        this.setState({ weeklyData: response.data.daily });\n      });\n  };\n\n  handlePlaceChanged = () => {\n    const place = this.autocomplete.getPlace();\n\n    const lat = place.geometry.location.lat();\n    const lon = place.geometry.location.lng();\n    this.setState({\n      city: place.address_components[0].long_name,\n      lat: place.geometry.location.lat(),\n      lon: place.geometry.location.lng(),\n    });\n    const appId = this.state.appId;\n\n    axios\n      .get(\n        \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n          lat +\n          \"&lon=\" +\n          lon +\n          \"&exclude=hourly\" +\n          \"&APPID=\" +\n          appId +\n          \"&units=metric\"\n      )\n      .then((response) => {\n        this.setState({ weeklyData: response.data.daily });\n      });\n  };\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Weather Today</h1>\n\n        <div className=\"input-div\">\n          <i className=\"fas fa-map-marker-alt\"></i>\n          <input\n            ref={this.autocompleteInput}\n            id=\"autocomplete\"\n            placeholder=\"Enter city name\"\n            type=\"text\"\n            className=\"searchBar\"\n          ></input>\n          <i className=\"fas fa-search\"></i>\n        </div>\n        <CardList\n          weeklyData={this.state.weeklyData}\n          lat={this.state.lat}\n          lon={this.state.lon}\n          city={this.state.city}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}