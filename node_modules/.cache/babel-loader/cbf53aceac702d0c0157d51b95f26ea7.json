{"ast":null,"code":"var _jsxFileName = \"/Users/ketanrikame/Desktop/weather-today/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\nconst google = window.google;\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.getWeather = () => {\n      const lat = this.state.lat;\n      const lon = this.state.lon;\n      const appId = this.state.appId; // axios\n      // .get(\n      //   \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n      //     lat+\n      //     \"&lon=\" +\n      //    lon +\n      //     \"&APPID=\" +\n      //     appId+ \"&units=metric\"\n      // )\n\n      axios.get(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + lat + \"&lon=\" + lon + \"&exclude=hourly\" + \"&APPID=\" + appId + \"&units=metric\").then(response => {\n        this.setState({\n          weeklyData: response.data.daily\n        });\n      });\n    };\n\n    this.handlePlaceChanged = () => {\n      const place = this.autocomplete.getPlace();\n      const lat = place.geometry.location.lat();\n      const lon = place.geometry.location.lng();\n      const appId = this.state.appId;\n      console.log('p', lat, lon);\n      axios.get(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + lat + \"&lon=\" + lon + \"&exclude=hourly\" + \"&APPID=\" + appId + \"&units=metric\").then(response => {\n        this.setState({\n          weeklyData: response.data.daily\n        });\n      });\n    };\n\n    this.onSearchChange = event => {\n      this.setState({\n        searchField: event.target.value\n      });\n    };\n\n    this.state = {\n      monsters: [],\n      lat: '',\n      lon: '',\n      searchField: '',\n      appId: '9b66a9c4055d9d1f99e3bdcdd1dbfa69',\n      weeklyData: []\n    };\n    this.autocompleteInput = React.createRef();\n    this.autocomplete = null; //this.handlePlaceChanged = this.handlePlaceChanged.bind(this);\n    //this.getWeather = this.getWeather.bind(this);\n\n    const google = window.google;\n    const options = {\n      chart: {\n        type: 'spline'\n      },\n      title: {\n        text: 'My chart'\n      },\n      series: [{\n        data: [1, 2, 1, 4, 3, 6]\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.autocomplete = new google.maps.places.Autocomplete(this.autocompleteInput.current, {\n      \"types\": [\"geocode\"]\n    });\n    this.autocomplete.addListener('place_changed', this.handlePlaceChanged);\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({\n      monsters: users\n    }));\n\n    if (\"geolocation\" in navigator) {\n      //document.getElementById(\"loader\").style.display = \"block\";\n      //document.getElementById(\"myDiv\").style.opacity = \"0.1\";\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        }, () => {\n          this.getWeather();\n        });\n      }, error => {\n        console.log('location1');\n        axios.get('http://ip-api.com/json').then(response => {\n          this.setState({\n            lat: response.data.lat,\n            lon: response.data.lon\n          }, () => {\n            this.getWeather();\n          });\n        });\n      });\n    } else {\n      // fetch(\"http://ip-api.com/json\")\n      // .then(response => response.json())\n      // .then(json => this.setState({location:json}));\n      console.log('location');\n      axios.get('http://ip-api.com/json').then(response => {\n        this.setState({\n          location: response.data\n        });\n      });\n    }\n  }\n\n  render() {\n    const {\n      monsters,\n      searchField\n    } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, \"Monsters Rolodex\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-map-marker-alt\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      ref: this.autocompleteInput,\n      id: \"autocomplete\",\n      placeholder: \"Enter city name\",\n      type: \"text\",\n      className: \"searchBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fas fa-search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 10\n      }\n    })), /*#__PURE__*/React.createElement(CardList, {\n      weeklyData: this.state.weeklyData,\n      lat: this.state.lat,\n      lon: this.state.lon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 5\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ketanrikame/Desktop/weather-today/src/App.js"],"names":["React","Component","axios","CardList","SearchBox","google","window","App","constructor","getWeather","lat","state","lon","appId","get","then","response","setState","weeklyData","data","daily","handlePlaceChanged","place","autocomplete","getPlace","geometry","location","lng","console","log","onSearchChange","event","searchField","target","value","monsters","autocompleteInput","createRef","options","chart","type","title","text","series","componentDidMount","maps","places","Autocomplete","current","addListener","fetch","json","users","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","render","filteredMonsters","filter","monster","name","toLowerCase","includes","Highcharts"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,4CAAzB;AACA,SAASC,SAAT,QAA0B,8CAA1B;AAEA,OAAO,WAAP;AACA,MAAMC,MAAM,GAAGC,MAAM,CAACD,MAAtB;;AAEA,MAAME,GAAN,SAAkBN,SAAlB,CAA4B;AAC1BO,EAAAA,WAAW,GAAG;AACZ;;AADY,SAuEdC,UAvEc,GAuED,MAAM;AACjB,YAAMC,GAAG,GAAG,KAAKC,KAAL,CAAWD,GAAvB;AACA,YAAME,GAAG,GAAG,KAAKD,KAAL,CAAWC,GAAvB;AACA,YAAMC,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAzB,CAHiB,CAIjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAX,MAAAA,KAAK,CACJY,GADD,CAEE,yDACEJ,GADF,GAEE,OAFF,GAGCE,GAHD,GAGO,iBAHP,GAIE,SAJF,GAKEC,KALF,GAKU,eAPZ,EAQEE,IARF,CAQOC,QAAQ,IAAG;AAChB,aAAKC,QAAL,CAAc;AAACC,UAAAA,UAAU,EAACF,QAAQ,CAACG,IAAT,CAAcC;AAA1B,SAAd;AACD,OAVD;AAYD,KAhGa;;AAAA,SAkGdC,kBAlGc,GAkGO,MAAM;AACzB,YAAMC,KAAK,GAAG,KAAKC,YAAL,CAAkBC,QAAlB,EAAd;AACD,YAAMd,GAAG,GAAGY,KAAK,CAACG,QAAN,CAAeC,QAAf,CAAwBhB,GAAxB,EAAZ;AACA,YAAME,GAAG,GAAGU,KAAK,CAACG,QAAN,CAAeC,QAAf,CAAwBC,GAAxB,EAAZ;AACA,YAAMd,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAzB;AACCe,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgBnB,GAAhB,EAAoBE,GAApB;AACAV,MAAAA,KAAK,CACJY,GADD,CAEE,yDACEJ,GADF,GAEE,OAFF,GAGCE,GAHD,GAGO,iBAHP,GAIE,SAJF,GAKEC,KALF,GAKU,eAPZ,EAQEE,IARF,CAQOC,QAAQ,IAAG;AAChB,aAAKC,QAAL,CAAc;AAACC,UAAAA,UAAU,EAACF,QAAQ,CAACG,IAAT,CAAcC;AAA1B,SAAd;AACD,OAVD;AAWD,KAnHa;;AAAA,SAqHdU,cArHc,GAqHGC,KAAK,IAAI;AACxB,WAAKd,QAAL,CAAc;AAAEe,QAAAA,WAAW,EAAED,KAAK,CAACE,MAAN,CAAaC;AAA5B,OAAd;AACD,KAvHa;;AAGZ,SAAKvB,KAAL,GAAa;AACXwB,MAAAA,QAAQ,EAAC,EADE;AAEXzB,MAAAA,GAAG,EAAC,EAFO;AAGXE,MAAAA,GAAG,EAAC,EAHO;AAIXoB,MAAAA,WAAW,EAAE,EAJF;AAKXnB,MAAAA,KAAK,EAAC,kCALK;AAMXK,MAAAA,UAAU,EAAC;AANA,KAAb;AAQA,SAAKkB,iBAAL,GAAyBpC,KAAK,CAACqC,SAAN,EAAzB;AACA,SAAKd,YAAL,GAAoB,IAApB,CAZY,CAaZ;AACA;;AACA,UAAMlB,MAAM,GAAGC,MAAM,CAACD,MAAtB;AACA,UAAMiC,OAAO,GAAG;AACdC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE;AADD,OADO;AAIdC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE;AADD,OAJO;AAOdC,MAAAA,MAAM,EAAE,CACN;AACExB,QAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB;AADR,OADM;AAPM,KAAhB;AAaD;;AAEDyB,EAAAA,iBAAiB,GAAG;AAClB,SAAKrB,YAAL,GAAoB,IAAIlB,MAAM,CAACwC,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CAAoC,KAAKX,iBAAL,CAAuBY,OAA3D,EAClB;AAAC,eAAS,CAAC,SAAD;AAAV,KADkB,CAApB;AAGF,SAAKzB,YAAL,CAAkB0B,WAAlB,CAA8B,eAA9B,EAA+C,KAAK5B,kBAApD;AACE6B,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACEnC,IADF,CACOC,QAAQ,IAAIA,QAAQ,CAACmC,IAAT,EADnB,EAECpC,IAFD,CAEMqC,KAAK,IAAI,KAAKnC,QAAL,CAAc;AAAEkB,MAAAA,QAAQ,EAAEiB;AAAZ,KAAd,CAFf;;AAKE,QAAI,iBAAiBC,SAArB,EAAgC;AAC9B;AACA;AACDA,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACEC,QAAD,IAAc;AACZ,aAAKvC,QAAL,CAAc;AAACP,UAAAA,GAAG,EAAC8C,QAAQ,CAACC,MAAT,CAAgBC,QAArB;AAA8B9C,UAAAA,GAAG,EAAC4C,QAAQ,CAACC,MAAT,CAAgBE;AAAlD,SAAd,EAA2E,MAAM;AAAC,eAAKlD,UAAL;AAAmB,SAArG;AACD,OAHF,EAIEmD,KAAD,IAAW;AACThC,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA3B,QAAAA,KAAK,CAACY,GAAN,CAAU,wBAAV,EACCC,IADD,CACMC,QAAQ,IAAI;AAChB,eAAKC,QAAL,CAAc;AAACP,YAAAA,GAAG,EAACM,QAAQ,CAACG,IAAT,CAAcT,GAAnB;AAAuBE,YAAAA,GAAG,EAACI,QAAQ,CAACG,IAAT,CAAcP;AAAzC,WAAd,EAA4D,MAAM;AAAC,iBAAKH,UAAL;AAAmB,WAAtF;AACD,SAHD;AAKD,OAXF;AAaA,KAhBD,MAgBO;AACL;AACA;AACA;AACAmB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA3B,MAAAA,KAAK,CAACY,GAAN,CAAU,wBAAV,EACCC,IADD,CACMC,QAAQ,IAAI;AAChB,aAAKC,QAAL,CAAc;AAAES,UAAAA,QAAQ,EAAEV,QAAQ,CAACG;AAArB,SAAd;AACD,OAHD;AAID;AAGJ;;AAoDD0C,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE1B,MAAAA,QAAF;AAAYH,MAAAA;AAAZ,QAA4B,KAAKrB,KAAvC;AACA,UAAMmD,gBAAgB,GAAG3B,QAAQ,CAAC4B,MAAT,CAAgBC,OAAO,IAC9CA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCnC,WAAW,CAACkC,WAAZ,EAApC,CADuB,CAAzB;AAIA,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAIE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAG,MAAA,SAAS,EAAC,uBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,eAEQ;AAAO,MAAA,GAAG,EAAE,KAAK9B,iBAAjB;AAAqC,MAAA,EAAE,EAAC,cAAxC;AAAuD,MAAA,WAAW,EAAC,iBAAnE;AACP,MAAA,IAAI,EAAC,MADE;AACK,MAAA,SAAS,EAAC,WADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFR,eAIC;AAAG,MAAA,KAAK,EAAC,eAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJD,CAJF,eAUE,oBAAC,QAAD;AAAU,MAAA,UAAU,EAAE,KAAKzB,KAAL,CAAWO,UAAjC;AAA6C,MAAA,GAAG,EAAE,KAAKP,KAAL,CAAWD,GAA7D;AAAkE,MAAA,GAAG,EAAE,KAAKC,KAAL,CAAWC,GAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACJ,oBAAC,eAAD;AAAiB,MAAA,UAAU,EAAEwD,UAA7B;AAAyC,MAAA,OAAO,EAAE9B,OAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADI,CAXF,CADF;AAiBD;;AAjJyB;;AAoJ5B,eAAe/B,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\nconst google = window.google;\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters:[],\n      lat:'',\n      lon:'',\n      searchField: '',\n      appId:'9b66a9c4055d9d1f99e3bdcdd1dbfa69',\n      weeklyData:[]\n    };\n    this.autocompleteInput = React.createRef();\n    this.autocomplete = null;\n    //this.handlePlaceChanged = this.handlePlaceChanged.bind(this);\n    //this.getWeather = this.getWeather.bind(this);\n    const google = window.google;\n    const options = {\n      chart: {\n        type: 'spline'\n      },\n      title: {\n        text: 'My chart'\n      },\n      series: [\n        {\n          data: [1, 2, 1, 4, 3, 6]\n        }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.autocomplete = new google.maps.places.Autocomplete(this.autocompleteInput.current,\n      {\"types\": [\"geocode\"]});\n\n  this.autocomplete.addListener('place_changed', this.handlePlaceChanged);\n    fetch('https://jsonplaceholder.typicode.com/users')\n     .then(response => response.json())\n    .then(users => this.setState({ monsters: users }));\n    \n\n      if (\"geolocation\" in navigator) { \n        //document.getElementById(\"loader\").style.display = \"block\";\n        //document.getElementById(\"myDiv\").style.opacity = \"0.1\";\n       navigator.geolocation.getCurrentPosition(\n        (position) => {\n          this.setState({lat:position.coords.latitude,lon:position.coords.longitude},() => {this.getWeather();});\n        },\n        (error) => {\n          console.log('location1')\n          axios.get('http://ip-api.com/json')\n          .then(response => {\n            this.setState({lat:response.data.lat,lon:response.data.lon},() => {this.getWeather();});\n          })\n\n        }\n      );\n      } else {\n        // fetch(\"http://ip-api.com/json\")\n        // .then(response => response.json())\n        // .then(json => this.setState({location:json}));\n        console.log('location')\n        axios.get('http://ip-api.com/json')\n        .then(response => {\n          this.setState({ location: response.data});\n        })\n      }\n  \n    \n  }\n\n  getWeather = () => {\n    const lat = this.state.lat\n    const lon = this.state.lon\n    const appId = this.state.appId\n    // axios\n    // .get(\n    //   \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n    //     lat+\n    //     \"&lon=\" +\n    //    lon +\n    //     \"&APPID=\" +\n    //     appId+ \"&units=metric\"\n    // )\n    axios\n    .get(\n      \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n        lat+\n        \"&lon=\" +\n       lon + \"&exclude=hourly\"+\n        \"&APPID=\" +\n        appId + \"&units=metric\"\n    ).then(response =>{\n      this.setState({weeklyData:response.data.daily});\n    })\n    \n  }\n\n  handlePlaceChanged = () => {\n    const place = this.autocomplete.getPlace();\n   const lat = place.geometry.location.lat()\n   const lon = place.geometry.location.lng();\n   const appId = this.state.appId\n    console.log('p',lat,lon)\n    axios\n    .get(\n      \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n        lat+\n        \"&lon=\" +\n       lon + \"&exclude=hourly\"+\n        \"&APPID=\" +\n        appId + \"&units=metric\"\n    ).then(response =>{\n      this.setState({weeklyData:response.data.daily});\n    })\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        {/* <SearchBox onSearchChange={this.onSearchChange} /> */}\n        {/* <i className='fa fa-home'></i> */}\n        <div className=\"input-div\">\n        <i className=\"fas fa-map-marker-alt\"></i>\n                <input ref={this.autocompleteInput}  id=\"autocomplete\" placeholder=\"Enter city name\"\n         type=\"text\" className=\"searchBar\"></input>\n         <i class=\"fas fa-search\"></i>\n         </div>\n        <CardList weeklyData={this.state.weeklyData} lat={this.state.lat} lon={this.state.lon}/>\n        <div>\n    <HighchartsReact highcharts={Highcharts} options={options} />\n  </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}