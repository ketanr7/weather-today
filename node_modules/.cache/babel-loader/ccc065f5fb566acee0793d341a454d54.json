{"ast":null,"code":"var _jsxFileName = \"/Users/ketanrikame/Desktop/weather-today/src/components/daily-data/daily-data.component.jsx\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Moment from 'react-moment';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'; //import HighchartsWrapper from './Chart'\n// Step 2 - Include the react-fusioncharts component\n\nimport ReactFC from \"react-fusioncharts\"; // Step 3 - Include the fusioncharts library\n\nimport FusionCharts from \"fusioncharts\"; // Step 4 - Include the chart type\n\nimport Column2D from \"fusioncharts/fusioncharts.charts\"; // Step 5 - Include the theme as fusion\n\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\"; //import FusionCharts from \"fusioncharts\";\n//import TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\n//import ReactFC from \"../lib/ReactFC\";\n// Step 6 - Adding the chart and theme as dependency to the core fusioncharts\n\nimport HighchartsWrapper from '../chart/chart.component';\nimport './daily-data.styles.css';\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n\nconst dataFetch = fetch(\"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/line-chart-with-time-axis-data.json\").then(jsonify);\nconst schemaFetch = fetch(\"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/line-chart-with-time-axis-schema.json\").then(jsonify);\nconst dataSource = {\n  chart: {},\n  caption: {\n    text: \"Sales Analysis\"\n  },\n  subcaption: {\n    text: \"Grocery\"\n  },\n  yaxis: [{\n    plot: {\n      value: \"Grocery Sales Value\"\n    },\n    format: {\n      prefix: \"$\"\n    },\n    title: \"Sale Value\"\n  }]\n};\nconst chartData = [{\n  label: \"Venezuela\",\n  value: \"290\"\n}, {\n  label: \"Saudi\",\n  value: \"260\"\n}, {\n  label: \"Canada\",\n  value: \"180\"\n}, {\n  label: \"Iran\",\n  value: \"140\"\n}, {\n  label: \"Russia\",\n  value: \"115\"\n}, {\n  label: \"UAE\",\n  value: \"100\"\n}, {\n  label: \"US\",\n  value: \"30\"\n}, {\n  label: \"China\",\n  value: \"30\"\n}];\nconst chartConfigs = {\n  type: \"column2d\",\n  // The chart type\n  width: \"700\",\n  // Width of the chart\n  height: \"400\",\n  // Height of the chart\n  dataFormat: \"json\",\n  // Data type\n  dataSource: {\n    // Chart Configuration\n    chart: {\n      caption: \"Countries With Most Oil Reserves [2017-18]\",\n      //Set the chart caption\n      subCaption: \"In MMbbl = One Million barrels\",\n      //Set the chart subcaption\n      xAxisName: \"Country\",\n      //Set the x-axis name\n      yAxisName: \"Reserves (MMbbl)\",\n      //Set the y-axis name\n      numberSuffix: \"K\",\n      theme: \"fusion\" //Set the theme for your chart\n\n    },\n    // Chart Data - from step 2\n    data: chartData\n  }\n}; // const DailyData = props => (\n// <h2>fg</h2>\n// // );\n// export default DailyData;\n\nclass DailyData extends Component {\n  constructor() {\n    super();\n    this.onFetchData = this.onFetchData.bind(this);\n    this.state = {\n      temp_now: '',\n      max: '',\n      min: '',\n      imgUrl: '',\n      lat: '',\n      lon: '',\n      appId: '9b66a9c4055d9d1f99e3bdcdd1dbfa69',\n      dailyData: {},\n      hourlyData: [],\n      timeseriesDs: {\n        type: \"timeseries\",\n        renderAt: \"container\",\n        width: \"600\",\n        height: \"400\",\n        dataSource\n      },\n      series: [{\n        data: []\n      }],\n      options: {\n        chart: {\n          type: 'spline'\n        },\n        title: {\n          text: 'My chart'\n        },\n        xAxis: {\n          title: {\n            text: \"\"\n          },\n          labels: {\n            formatter: function () {\n              return this.value;\n            }\n          },\n          categories: []\n        } // series: [\n        //   {\n        //     data: []\n        //   }\n        // ]\n\n      }\n    }; // Create a JSON object to store the chart configurations\n  }\n\n  componentDidMount() {\n    this.onFetchData();\n    const lat = this.props.location.state.lat;\n    const lon = this.props.location.state.lon;\n    const date = this.props.match.params.day;\n    axios.get(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + lat + \"&lon=\" + lon + \"&exclude=\" + \"&dt=\" + this.props.match.params.day + \"&APPID=\" + this.state.appId + \"&units=metric\").then(response => {\n      var temp = response.data.daily.filter(function (data) {\n        return data.dt == date;\n      });\n      console.log(temp);\n      this.setState({\n        dailyData: temp[0]\n      });\n      console.log(this.state.dailyData.weather[0].icon);\n      this.setState({\n        imgUrl: this.state.dailyData.weather[0].icon\n      });\n      this.setState({\n        temp_now: this.state.dailyData.temp.day\n      });\n      this.setState({\n        max: this.state.dailyData.temp.max\n      });\n      this.setState({\n        min: this.state.dailyData.temp.min\n      }); //const imgUrl = this.state.dailyData.weather[0].icon;\n      //   let newArray = {...this.state.options.chart}\n      //   let newArray1 = {...this.state.options.title}\n      //   console.log(newArray,newArray1)\n      // const options = {...this.state};\n      // console.log('nn',options)\n      // const options1 = {...options.options};\n      // console.log('nn1',options1)\n      // const options3 = {...options1.series};\n      // console.log('nn1',options3)\n      // const options4 = {...options3.data};\n      // console.log('nn1',options4)\n      //this.setState({});\n      //   const newAccess1 = {...this.state.xAxis};\n      //const newAccess2 = {...newAccess.series};\n      //const newAccess3 = {...newAccess2.data};\n      //console.log(newAccess2,newAccess3)\n      //newAccess1.categories = response.data.hourly;\n      // const newarr = {...this.state.series}\n      // const newarr1 = {...newarr.data}\n      // console.log(newarr,newarr1,'fe')\n      //   this.setState({options.xAxis.categories:response.data.hourly});\n\n      const info = response.data.hourly.map(girl => Number(girl.temp.toFixed()));\n      console.log(info); //this.setState({newarr:info})\n      //  const info2 = [{...newarr},info]\n      //  this.setState({newarr1:info})\n      // console.log(this.state.series.data)\n      //const info2 = [{...newArray},{...newArray1},info]\n      // this.setState({\n      //     todos: newArray,\n      //     });\n      // //options3 = info;\n      // this.setState({options3: info});\n      // //this.setState({options3: options4});\n      // this.setState({options1: options3});\n      // this.setState({options: options1});\n      //const info= response.data.hourly.map((girl) => girl.temp.toFixed());\n      // console.log('in',info)\n      // const info1 = [{...newAccess},info]\n      // console.log('iii',info1)\n      // this.setState({data: info});\n      //console.log(this.state.option3)\n\n      let _this = this; //_this.state.series[0].data = info;\n\n\n      _this.setState({\n        series: [{\n          data: info\n        }]\n      });\n    });\n  }\n\n  onFetchData() {\n    console.log(dataFetch, schemaFetch);\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      const fusionTable = new FusionCharts.DataStore().createDataTable(data, schema);\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"outer-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dailycard-container temp_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"img-div daily-img-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      alt: \"monster\",\n      src: `http://openweathermap.org/img/w/${this.state.imgUrl}.png`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Moment, {\n      unix: true,\n      format: \"ddd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 12\n      }\n    }, this.state.dailyData.dt))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"city-div daily-city-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }\n    }, parseFloat(this.state.temp_now).toFixed(), \"\\u2103\"), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }\n    }, this.props.match.params.city)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div daily-info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }\n    }, \"High\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }\n    }, parseFloat(this.state.max).toFixed(), \"\\u2103\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div daily-info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }\n    }, \"Low\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }\n    }, parseFloat(this.state.min).toFixed(), \"\\u2103\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div daily-info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }\n    }, \"Latitude\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }\n    }, this.props.location.state.lat)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div daily-info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 11\n      }\n    }, \"Longitude\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }\n    }, this.props.location.state.lon)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div daily-info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }\n    }, \"Pressure\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }\n    }, this.state.dailyData.pressure, \" hpa\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div daily-info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 11\n      }\n    }, \"Humidity\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }\n    }, this.state.dailyData.humidity, \" %\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsWrapper, {\n      chartData: this.state.series,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div daily-info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }\n    }, \"Sunrise\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Moment, {\n      unix: true,\n      format: \"h:mm a\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 15\n      }\n    }, this.state.dailyData.sunrise))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div daily-info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }\n    }, \"Sunset\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Moment, {\n      unix: true,\n      format: \"h:mm a\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 15\n      }\n    }, this.state.dailyData.sunset)))));\n  }\n\n}\n\nexport default DailyData;","map":{"version":3,"sources":["/Users/ketanrikame/Desktop/weather-today/src/components/daily-data/daily-data.component.jsx"],"names":["React","Component","axios","Moment","Highcharts","HighchartsReact","ReactFC","FusionCharts","Column2D","FusionTheme","TimeSeries","HighchartsWrapper","fcRoot","jsonify","res","json","dataFetch","fetch","then","schemaFetch","dataSource","chart","caption","text","subcaption","yaxis","plot","value","format","prefix","title","chartData","label","chartConfigs","type","width","height","dataFormat","subCaption","xAxisName","yAxisName","numberSuffix","theme","data","DailyData","constructor","onFetchData","bind","state","temp_now","max","min","imgUrl","lat","lon","appId","dailyData","hourlyData","timeseriesDs","renderAt","series","options","xAxis","labels","formatter","categories","componentDidMount","props","location","date","match","params","day","get","response","temp","daily","filter","dt","console","log","setState","weather","icon","info","hourly","map","girl","Number","toFixed","_this","Promise","all","schema","fusionTable","DataStore","createDataTable","Object","assign","render","parseFloat","city","pressure","humidity","sunrise","sunset"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport Moment from 'react-moment';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n//import HighchartsWrapper from './Chart'\n// Step 2 - Include the react-fusioncharts component\nimport ReactFC from \"react-fusioncharts\";\n\n// Step 3 - Include the fusioncharts library\nimport FusionCharts from \"fusioncharts\";\n\n// Step 4 - Include the chart type\nimport Column2D from \"fusioncharts/fusioncharts.charts\";\n\n// Step 5 - Include the theme as fusion\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\n//import FusionCharts from \"fusioncharts\";\n//import TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\n//import ReactFC from \"../lib/ReactFC\";\n// Step 6 - Adding the chart and theme as dependency to the core fusioncharts\nimport HighchartsWrapper from '../chart/chart.component'\n\nimport './daily-data.styles.css';\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\nReactFC.fcRoot(FusionCharts, TimeSeries);\nconst jsonify = res => res.json();\nconst dataFetch = fetch(\n  \"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/line-chart-with-time-axis-data.json\"\n).then(jsonify);\nconst schemaFetch = fetch(\n  \"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/line-chart-with-time-axis-schema.json\"\n).then(jsonify);\nconst dataSource = {\n    chart: {},\n    caption: {\n      text: \"Sales Analysis\"\n    },\n    subcaption: {\n      text: \"Grocery\"\n    },\n    yaxis: [\n      {\n        plot: {\n          value: \"Grocery Sales Value\"\n        },\n        format: {\n          prefix: \"$\"\n        },\n        title: \"Sale Value\"\n      }\n    ]\n  };\nconst chartData = [\n    {\n      label: \"Venezuela\",\n      value: \"290\"\n    },\n    {\n      label: \"Saudi\",\n      value: \"260\"\n    },\n    {\n      label: \"Canada\",\n      value: \"180\"\n    },\n    {\n      label: \"Iran\",\n      value: \"140\"\n    },\n    {\n      label: \"Russia\",\n      value: \"115\"\n    },\n    {\n      label: \"UAE\",\n      value: \"100\"\n    },\n    {\n      label: \"US\",\n      value: \"30\"\n    },\n    {\n      label: \"China\",\n      value: \"30\"\n    }\n  ];\nconst chartConfigs = {\n    type: \"column2d\", // The chart type\n    width: \"700\", // Width of the chart\n    height: \"400\", // Height of the chart\n    dataFormat: \"json\", // Data type\n    dataSource: {\n      // Chart Configuration\n      chart: {\n        caption: \"Countries With Most Oil Reserves [2017-18]\",    //Set the chart caption\n        subCaption: \"In MMbbl = One Million barrels\",             //Set the chart subcaption\n        xAxisName: \"Country\",           //Set the x-axis name\n        yAxisName: \"Reserves (MMbbl)\",  //Set the y-axis name\n        numberSuffix: \"K\",\n        theme: \"fusion\"                 //Set the theme for your chart\n      },\n      // Chart Data - from step 2\n      data: chartData\n    }\n  };\n// const DailyData = props => (\n// <h2>fg</h2>\n\n// // );\n\n// export default DailyData;\n\nclass DailyData extends Component {\n\n    constructor() {\n        super();\n        this.onFetchData = this.onFetchData.bind(this);\n    \n        this.state = {\n            temp_now:'',\n            max:'',\n            min:'',\n            imgUrl:'',\n          lat:'',\n          lon:'',\n          appId:'9b66a9c4055d9d1f99e3bdcdd1dbfa69',\n          dailyData:{},\n          hourlyData:[],\n          timeseriesDs: {\n            type: \"timeseries\",\n            renderAt: \"container\",\n            width: \"600\",\n            height: \"400\",\n            dataSource\n          },\n          series: [{\n            data: []\n          }],\n          options : {\n            chart: {\n              type: 'spline'\n            },\n            title: {\n              text: 'My chart'\n            },\n            xAxis: {\n                title: {\n                  text: \"\"\n                },\n                labels: {\n                    formatter: function() {\n                      return this.value;\n                    }\n                  },\n                categories:[]\n              },\n            // series: [\n            //   {\n            //     data: []\n            //   }\n            // ]\n            \n          }\n        };\n       \n\n          // Create a JSON object to store the chart configurations\n\n    }\n\n    componentDidMount() {\n        this.onFetchData();\n        const lat = this.props.location.state.lat\n        const lon = this.props.location.state.lon\n        const date = this.props.match.params.day\n        axios\n        .get(\n          \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n            lat+\n            \"&lon=\" +\n           lon + \"&exclude=\"+\"&dt=\" + this.props.match.params.day+\n            \"&APPID=\" +\n            this.state.appId + \"&units=metric\" \n        ).then(response =>{\n            var temp = response.data.daily.filter(function(data){\n                return data.dt == date\n            })\n            console.log(temp)\n          this.setState({dailyData:temp[0]});\n          console.log(this.state.dailyData.weather[0].icon)\n          this.setState({imgUrl:this.state.dailyData.weather[0].icon});\n          this.setState({temp_now:this.state.dailyData.temp.day});\n          this.setState({max:this.state.dailyData.temp.max});\n          this.setState({min:this.state.dailyData.temp.min});\n          //const imgUrl = this.state.dailyData.weather[0].icon;\n          \n        //   let newArray = {...this.state.options.chart}\n        //   let newArray1 = {...this.state.options.title}\n        //   console.log(newArray,newArray1)\n        // const options = {...this.state};\n        // console.log('nn',options)\n        // const options1 = {...options.options};\n        // console.log('nn1',options1)\n        // const options3 = {...options1.series};\n        // console.log('nn1',options3)\n        // const options4 = {...options3.data};\n        // console.log('nn1',options4)\n        \n        //this.setState({});\n        //   const newAccess1 = {...this.state.xAxis};\n          //const newAccess2 = {...newAccess.series};\n          //const newAccess3 = {...newAccess2.data};\n          //console.log(newAccess2,newAccess3)\n//newAccess1.categories = response.data.hourly;\n// const newarr = {...this.state.series}\n// const newarr1 = {...newarr.data}\n// console.log(newarr,newarr1,'fe')\n        //   this.setState({options.xAxis.categories:response.data.hourly});\n    const info=response.data.hourly.map((girl) => Number(girl.temp.toFixed()));\n    console.log(info)\n    //this.setState({newarr:info})\n    //  const info2 = [{...newarr},info]\n    //  this.setState({newarr1:info})\n    // console.log(this.state.series.data)\n    //const info2 = [{...newArray},{...newArray1},info]\n    // this.setState({\n    //     todos: newArray,\n    //     });\n    // //options3 = info;\n    // this.setState({options3: info});\n    // //this.setState({options3: options4});\n    // this.setState({options1: options3});\n    // this.setState({options: options1});\n        //const info= response.data.hourly.map((girl) => girl.temp.toFixed());\n        // console.log('in',info)\n        // const info1 = [{...newAccess},info]\n        // console.log('iii',info1)\n        // this.setState({data: info});\n        //console.log(this.state.option3)\n        let _this = this;\n        //_this.state.series[0].data = info;\n        _this.setState({ series: [{ data: info }] });\n        })\n    }\n\n    onFetchData() {\n        console.log(dataFetch,schemaFetch)\n        Promise.all([dataFetch, schemaFetch]).then(res => {\n          const data = res[0];\n          const schema = res[1];\n          const fusionTable = new FusionCharts.DataStore().createDataTable(\n            data,\n            schema\n          );\n          const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n          timeseriesDs.dataSource.data = fusionTable;\n          this.setState({\n            timeseriesDs\n          });\n        });\n      }\n\n    render() {\n      return (\n          <div className=\"outer-div\">\n           {/* <ReactFC {...chartConfigs} /> */}\n           \n        <div className='dailycard-container temp_container'>\n        <div className=\"img-div daily-img-div\">\n          <img\n          alt='monster'\n          src={`http://openweathermap.org/img/w/${this.state.imgUrl}.png`}\n        />\n        <p><Moment unix format='ddd'>{this.state.dailyData.dt}</Moment></p>\n        </div>\n        <div className=\"city-div daily-city-div\">\n        <h2>{parseFloat(this.state.temp_now).toFixed()}&#8451;</h2>\n        <h4>{this.props.match.params.city}</h4>\n        </div>\n        <div className=\"info-div daily-info-div\">\n          <p>High</p>\n          <h5>{parseFloat(this.state.max).toFixed()}&#8451;</h5>\n        </div>\n        <div className=\"info-div daily-info-div\">\n          <p>Low</p>\n          <h5>{parseFloat(this.state.min).toFixed()}&#8451;</h5>\n        </div>\n        <div className=\"info-div daily-info-div\">\n          <p>Latitude</p>\n          <h5>{this.props.location.state.lat}</h5>\n        </div>\n        <div className=\"info-div daily-info-div\">\n          <p>Longitude</p>\n          <h5>{this.props.location.state.lon}</h5>\n        </div>\n        <div className=\"info-div daily-info-div\">\n          <p>Pressure</p>\n          <h5>{this.state.dailyData.pressure} hpa</h5>\n        </div>\n        <div className=\"info-div daily-info-div\">\n          <p>Humidity</p>\n          <h5>{this.state.dailyData.humidity} %</h5>\n        </div>\n        <div>\n    {/* <HighchartsReact highcharts={Highcharts} \n    options={this.state.options}\n    chartData={this.state.series}\n     /> */}\n     {/* <ReactFC {...this.state.timeseriesDs} /> */}\n     <HighchartsWrapper\n        chartData={this.state.series}\n      />\n  </div>\n        \n        <div className=\"info-div daily-info-div\">\n          <p>Sunrise</p>\n          <h5><Moment unix format='h:mm a'>{this.state.dailyData.sunrise}</Moment></h5>\n        </div>\n        <div className=\"info-div daily-info-div\">\n          <p>Sunset</p>\n          <h5><Moment unix format='h:mm a'>{this.state.dailyData.sunset}</Moment></h5>\n        </div>\n    \n      </div>\n      </div>\n      );\n    }\n  }\n  \n  export default DailyData;\n"]},"metadata":{},"sourceType":"module"}