{"ast":null,"code":"var _jsxFileName = \"/Users/ketanrikame/Desktop/weather-today/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.getWeather = () => {\n      const lat = this.state.lat;\n      const lon = this.state.lon;\n      const appId = this.state.appId; // axios\n      // .get(\n      //   \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n      //     lat+\n      //     \"&lon=\" +\n      //    lon +\n      //     \"&APPID=\" +\n      //     appId+ \"&units=metric\"\n      // )\n\n      axios.get(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + lat + \"&lon=\" + lon + \"&exclude=hourly\" + \"&APPID=\" + appId + \"&units=metric\").then(response => {\n        this.setState({\n          weeklyData: response.data.daily\n        });\n      });\n    };\n\n    this.onSearchChange = event => {\n      this.setState({\n        searchField: event.target.value\n      });\n    };\n\n    this.state = {\n      monsters: [],\n      lat: '',\n      lon: '',\n      searchField: '',\n      appId: '9b66a9c4055d9d1f99e3bdcdd1dbfa69',\n      weeklyData: []\n    };\n    this.autocompleteInput = React.createRef();\n    this.autocomplete = null;\n    this.handlePlaceChanged = this.handlePlaceChanged.bind(this); //this.getWeather = this.getWeather.bind(this);\n  }\n\n  componentDidMount() {\n    this.autocomplete = new google.maps.places.Autocomplete(this.autocompleteInput.current, {\n      \"types\": [\"geocode\"]\n    });\n    this.autocomplete.addListener('place_changed', this.handlePlaceChanged);\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({\n      monsters: users\n    }));\n\n    if (\"geolocation\" in navigator) {\n      //document.getElementById(\"loader\").style.display = \"block\";\n      //document.getElementById(\"myDiv\").style.opacity = \"0.1\";\n      navigator.geolocation.getCurrentPosition(position => {\n        this.setState({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        }, () => {\n          this.getWeather();\n        });\n      }, error => {\n        console.log('location1');\n        axios.get('http://ip-api.com/json').then(response => {\n          this.setState({\n            lat: response.data.lat,\n            lon: response.data.lon\n          }, () => {\n            this.getWeather();\n          });\n        });\n      });\n    } else {\n      // fetch(\"http://ip-api.com/json\")\n      // .then(response => response.json())\n      // .then(json => this.setState({location:json}));\n      console.log('location');\n      axios.get('http://ip-api.com/json').then(response => {\n        this.setState({\n          location: response.data\n        });\n      });\n    }\n  }\n\n  handlePlaceChanged() {\n    const place = this.autocomplete.getPlace();\n    this.props.onPlaceLoaded(place);\n  }\n\n  render() {\n    const {\n      monsters,\n      searchField\n    } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, \"Monsters Rolodex\"), /*#__PURE__*/React.createElement(SearchBox, {\n      onSearchChange: this.onSearchChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CardList, {\n      weeklyData: this.state.weeklyData,\n      lat: this.state.lat,\n      lon: this.state.lon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      ref: this.autocompleteInput,\n      id: \"autocomplete\",\n      placeholder: \"Enter your address\",\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ketanrikame/Desktop/weather-today/src/App.js"],"names":["React","Component","axios","CardList","SearchBox","App","constructor","getWeather","lat","state","lon","appId","get","then","response","setState","weeklyData","data","daily","onSearchChange","event","searchField","target","value","monsters","autocompleteInput","createRef","autocomplete","handlePlaceChanged","bind","componentDidMount","google","maps","places","Autocomplete","current","addListener","fetch","json","users","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","log","location","place","getPlace","props","onPlaceLoaded","render","filteredMonsters","filter","monster","name","toLowerCase","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters:[],\n      lat:'',\n      lon:'',\n      searchField: '',\n      appId:'9b66a9c4055d9d1f99e3bdcdd1dbfa69',\n      weeklyData:[]\n    };\n    this.autocompleteInput = React.createRef();\n    this.autocomplete = null;\n    this.handlePlaceChanged = this.handlePlaceChanged.bind(this);\n    //this.getWeather = this.getWeather.bind(this);\n\n  }\n\n  componentDidMount() {\n    this.autocomplete = new google.maps.places.Autocomplete(this.autocompleteInput.current,\n      {\"types\": [\"geocode\"]});\n\n  this.autocomplete.addListener('place_changed', this.handlePlaceChanged);\n    fetch('https://jsonplaceholder.typicode.com/users')\n     .then(response => response.json())\n    .then(users => this.setState({ monsters: users }));\n    \n\n      if (\"geolocation\" in navigator) { \n        //document.getElementById(\"loader\").style.display = \"block\";\n        //document.getElementById(\"myDiv\").style.opacity = \"0.1\";\n       navigator.geolocation.getCurrentPosition(\n        (position) => {\n          this.setState({lat:position.coords.latitude,lon:position.coords.longitude},() => {this.getWeather();});\n        },\n        (error) => {\n          console.log('location1')\n          axios.get('http://ip-api.com/json')\n          .then(response => {\n            this.setState({lat:response.data.lat,lon:response.data.lon},() => {this.getWeather();});\n          })\n\n        }\n      );\n      } else {\n        // fetch(\"http://ip-api.com/json\")\n        // .then(response => response.json())\n        // .then(json => this.setState({location:json}));\n        console.log('location')\n        axios.get('http://ip-api.com/json')\n        .then(response => {\n          this.setState({ location: response.data});\n        })\n      }\n  \n    \n  }\n\n  getWeather = () => {\n    const lat = this.state.lat\n    const lon = this.state.lon\n    const appId = this.state.appId\n    // axios\n    // .get(\n    //   \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n    //     lat+\n    //     \"&lon=\" +\n    //    lon +\n    //     \"&APPID=\" +\n    //     appId+ \"&units=metric\"\n    // )\n    axios\n    .get(\n      \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n        lat+\n        \"&lon=\" +\n       lon + \"&exclude=hourly\"+\n        \"&APPID=\" +\n        appId + \"&units=metric\"\n    ).then(response =>{\n      this.setState({weeklyData:response.data.daily});\n    })\n    \n  }\n\n  handlePlaceChanged(){\n    const place = this.autocomplete.getPlace();\n    this.props.onPlaceLoaded(place);\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox onSearchChange={this.onSearchChange} />\n        <CardList weeklyData={this.state.weeklyData} lat={this.state.lat} lon={this.state.lon}/>\n        <input ref={this.autocompleteInput}  id=\"autocomplete\" placeholder=\"Enter your address\"\n         type=\"text\"></input>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}