{"ast":null,"code":"var _jsxFileName = \"/Users/ketanrikame/Desktop/weather-today/src/components/daily-data/daily-data.component.jsx\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Moment from 'react-moment';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official'; //import HighchartsWrapper from './Chart'\n// Step 2 - Include the react-fusioncharts component\n\nimport ReactFC from \"react-fusioncharts\"; // Step 3 - Include the fusioncharts library\n\nimport FusionCharts from \"fusioncharts\"; // Step 4 - Include the chart type\n\nimport Column2D from \"fusioncharts/fusioncharts.charts\"; // Step 5 - Include the theme as fusion\n\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\"; //import FusionCharts from \"fusioncharts\";\n//import TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\n//import ReactFC from \"../lib/ReactFC\";\n// Step 6 - Adding the chart and theme as dependency to the core fusioncharts\n\nimport HighchartsWrapper from '../chart/chart.component';\nimport './daily-data.styles.css';\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n\nconst dataFetch = fetch(\"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/line-chart-with-time-axis-data.json\").then(jsonify);\nconst schemaFetch = fetch(\"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/line-chart-with-time-axis-schema.json\").then(jsonify);\nconst dataSource = {\n  chart: {},\n  caption: {\n    text: \"Sales Analysis\"\n  },\n  subcaption: {\n    text: \"Grocery\"\n  },\n  yaxis: [{\n    plot: {\n      value: \"Grocery Sales Value\"\n    },\n    format: {\n      prefix: \"$\"\n    },\n    title: \"Sale Value\"\n  }]\n};\nconst chartData = [{\n  label: \"Venezuela\",\n  value: \"290\"\n}, {\n  label: \"Saudi\",\n  value: \"260\"\n}, {\n  label: \"Canada\",\n  value: \"180\"\n}, {\n  label: \"Iran\",\n  value: \"140\"\n}, {\n  label: \"Russia\",\n  value: \"115\"\n}, {\n  label: \"UAE\",\n  value: \"100\"\n}, {\n  label: \"US\",\n  value: \"30\"\n}, {\n  label: \"China\",\n  value: \"30\"\n}];\nconst chartConfigs = {\n  type: \"column2d\",\n  // The chart type\n  width: \"700\",\n  // Width of the chart\n  height: \"400\",\n  // Height of the chart\n  dataFormat: \"json\",\n  // Data type\n  dataSource: {\n    // Chart Configuration\n    chart: {\n      caption: \"Countries With Most Oil Reserves [2017-18]\",\n      //Set the chart caption\n      subCaption: \"In MMbbl = One Million barrels\",\n      //Set the chart subcaption\n      xAxisName: \"Country\",\n      //Set the x-axis name\n      yAxisName: \"Reserves (MMbbl)\",\n      //Set the y-axis name\n      numberSuffix: \"K\",\n      theme: \"fusion\" //Set the theme for your chart\n\n    },\n    // Chart Data - from step 2\n    data: chartData\n  }\n}; // const DailyData = props => (\n// <h2>fg</h2>\n// // );\n// export default DailyData;\n\nclass DailyData extends Component {\n  constructor() {\n    super();\n    this.onFetchData = this.onFetchData.bind(this);\n    this.state = {\n      lat: '',\n      lon: '',\n      appId: '9b66a9c4055d9d1f99e3bdcdd1dbfa69',\n      dailyData: {},\n      hourlyData: [],\n      timeseriesDs: {\n        type: \"timeseries\",\n        renderAt: \"container\",\n        width: \"600\",\n        height: \"400\",\n        dataSource\n      },\n      series: [{\n        data: [1, 2, 3]\n      }],\n      options: {\n        chart: {\n          type: 'spline'\n        },\n        title: {\n          text: 'My chart'\n        },\n        xAxis: {\n          title: {\n            text: \"\"\n          },\n          categories: []\n        } // series: [\n        //   {\n        //     data: []\n        //   }\n        // ]\n\n      }\n    }; // Create a JSON object to store the chart configurations\n  }\n\n  componentDidMount() {\n    this.onFetchData();\n    const lat = this.props.location.state.lat;\n    const lon = this.props.location.state.lon;\n    axios.get(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + lat + \"&lon=\" + lon + \"&exclude=\" + \"&APPID=\" + this.state.appId + \"&units=metric\").then(response => {\n      this.setState({\n        dailyData: response.data.current\n      });\n      let newArray = { ...this.state.options.chart\n      };\n      let newArray1 = { ...this.state.options.title\n      };\n      console.log(newArray, newArray1); // const options = {...this.state};\n      // console.log('nn',options)\n      // const options1 = {...options.options};\n      // console.log('nn1',options1)\n      // const options3 = {...options1.series};\n      // console.log('nn1',options3)\n      // const options4 = {...options3.data};\n      // console.log('nn1',options4)\n      //this.setState({});\n      //   const newAccess1 = {...this.state.xAxis};\n      //const newAccess2 = {...newAccess.series};\n      //const newAccess3 = {...newAccess2.data};\n      //console.log(newAccess2,newAccess3)\n      //newAccess1.categories = response.data.hourly;\n\n      const newarr = { ...this.state.series\n      };\n      const newarr1 = { ...newarr.data\n      };\n      console.log(newarr, newarr1, 'fe'); //   this.setState({options.xAxis.categories:response.data.hourly});\n\n      const info = response.data.hourly.map(girl => girl.temp.toFixed());\n      console.log(info); //this.setState({newarr:info})\n\n      const info2 = [{ ...newarr\n      }, info];\n      this.setState({\n        newarr1: info\n      });\n      console.log(this.state.series.data); //const info2 = [{...newArray},{...newArray1},info]\n      // this.setState({\n      //     todos: newArray,\n      //     });\n      // //options3 = info;\n      // this.setState({options3: info});\n      // //this.setState({options3: options4});\n      // this.setState({options1: options3});\n      // this.setState({options: options1});\n      //const info= response.data.hourly.map((girl) => girl.temp.toFixed());\n      // console.log('in',info)\n      // const info1 = [{...newAccess},info]\n      // console.log('iii',info1)\n      // this.setState({data: info});\n      //console.log(this.state.option3)\n\n      let _this = this;\n\n      _this.state.series[0].data = info;\n    });\n  }\n\n  onFetchData() {\n    console.log(dataFetch, schemaFetch);\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      const fusionTable = new FusionCharts.DataStore().createDataTable(data, schema);\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"outer-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dailycard-container temp_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }\n    }, parseFloat(this.state.dailyData.temp).toFixed(), \"\\u2103\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"img-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Moment, {\n      unix: true,\n      format: \"ddd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 12\n      }\n    }, this.state.dailyData.dt))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }\n    }, \"Latitude\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }\n    }, this.props.location.state.lat)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }\n    }, \"Longitude\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }\n    }, this.props.location.state.lon)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }\n    }, \"Pressure\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }\n    }, this.state.dailyData.pressure, \" hpa\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }\n    }, \"Humidity\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }\n    }, this.state.dailyData.humidity, \" %\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(HighchartsWrapper, {\n      chartData: this.state.series,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }\n    }, \"Sunrise\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Moment, {\n      unix: true,\n      format: \"h:mm a\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 15\n      }\n    }, this.state.dailyData.sunrise))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"info-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }\n    }, \"Sunset\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Moment, {\n      unix: true,\n      format: \"h:mm a\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 15\n      }\n    }, this.state.dailyData.sunset)))));\n  }\n\n}\n\nexport default DailyData;","map":{"version":3,"sources":["/Users/ketanrikame/Desktop/weather-today/src/components/daily-data/daily-data.component.jsx"],"names":["React","Component","axios","Moment","Highcharts","HighchartsReact","ReactFC","FusionCharts","Column2D","FusionTheme","TimeSeries","HighchartsWrapper","fcRoot","jsonify","res","json","dataFetch","fetch","then","schemaFetch","dataSource","chart","caption","text","subcaption","yaxis","plot","value","format","prefix","title","chartData","label","chartConfigs","type","width","height","dataFormat","subCaption","xAxisName","yAxisName","numberSuffix","theme","data","DailyData","constructor","onFetchData","bind","state","lat","lon","appId","dailyData","hourlyData","timeseriesDs","renderAt","series","options","xAxis","categories","componentDidMount","props","location","get","response","setState","current","newArray","newArray1","console","log","newarr","newarr1","info","hourly","map","girl","temp","toFixed","info2","_this","Promise","all","schema","fusionTable","DataStore","createDataTable","Object","assign","render","parseFloat","dt","pressure","humidity","sunrise","sunset"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport Moment from 'react-moment';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\n//import HighchartsWrapper from './Chart'\n// Step 2 - Include the react-fusioncharts component\nimport ReactFC from \"react-fusioncharts\";\n\n// Step 3 - Include the fusioncharts library\nimport FusionCharts from \"fusioncharts\";\n\n// Step 4 - Include the chart type\nimport Column2D from \"fusioncharts/fusioncharts.charts\";\n\n// Step 5 - Include the theme as fusion\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\n//import FusionCharts from \"fusioncharts\";\n//import TimeSeries from \"fusioncharts/fusioncharts.timeseries\";\n//import ReactFC from \"../lib/ReactFC\";\n// Step 6 - Adding the chart and theme as dependency to the core fusioncharts\nimport HighchartsWrapper from '../chart/chart.component'\n\nimport './daily-data.styles.css';\nReactFC.fcRoot(FusionCharts, Column2D, FusionTheme);\nReactFC.fcRoot(FusionCharts, TimeSeries);\nconst jsonify = res => res.json();\nconst dataFetch = fetch(\n  \"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/line-chart-with-time-axis-data.json\"\n).then(jsonify);\nconst schemaFetch = fetch(\n  \"https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/line-chart-with-time-axis-schema.json\"\n).then(jsonify);\nconst dataSource = {\n    chart: {},\n    caption: {\n      text: \"Sales Analysis\"\n    },\n    subcaption: {\n      text: \"Grocery\"\n    },\n    yaxis: [\n      {\n        plot: {\n          value: \"Grocery Sales Value\"\n        },\n        format: {\n          prefix: \"$\"\n        },\n        title: \"Sale Value\"\n      }\n    ]\n  };\nconst chartData = [\n    {\n      label: \"Venezuela\",\n      value: \"290\"\n    },\n    {\n      label: \"Saudi\",\n      value: \"260\"\n    },\n    {\n      label: \"Canada\",\n      value: \"180\"\n    },\n    {\n      label: \"Iran\",\n      value: \"140\"\n    },\n    {\n      label: \"Russia\",\n      value: \"115\"\n    },\n    {\n      label: \"UAE\",\n      value: \"100\"\n    },\n    {\n      label: \"US\",\n      value: \"30\"\n    },\n    {\n      label: \"China\",\n      value: \"30\"\n    }\n  ];\nconst chartConfigs = {\n    type: \"column2d\", // The chart type\n    width: \"700\", // Width of the chart\n    height: \"400\", // Height of the chart\n    dataFormat: \"json\", // Data type\n    dataSource: {\n      // Chart Configuration\n      chart: {\n        caption: \"Countries With Most Oil Reserves [2017-18]\",    //Set the chart caption\n        subCaption: \"In MMbbl = One Million barrels\",             //Set the chart subcaption\n        xAxisName: \"Country\",           //Set the x-axis name\n        yAxisName: \"Reserves (MMbbl)\",  //Set the y-axis name\n        numberSuffix: \"K\",\n        theme: \"fusion\"                 //Set the theme for your chart\n      },\n      // Chart Data - from step 2\n      data: chartData\n    }\n  };\n// const DailyData = props => (\n// <h2>fg</h2>\n\n// // );\n\n// export default DailyData;\n\nclass DailyData extends Component {\n\n    constructor() {\n        super();\n        this.onFetchData = this.onFetchData.bind(this);\n    \n        this.state = {\n          lat:'',\n          lon:'',\n          appId:'9b66a9c4055d9d1f99e3bdcdd1dbfa69',\n          dailyData:{},\n          hourlyData:[],\n          timeseriesDs: {\n            type: \"timeseries\",\n            renderAt: \"container\",\n            width: \"600\",\n            height: \"400\",\n            dataSource\n          },\n          series: [{\n            data: [1,2,3]\n          }],\n          options : {\n            chart: {\n              type: 'spline'\n            },\n            title: {\n              text: 'My chart'\n            },\n            xAxis: {\n                title: {\n                  text: \"\"\n                },\n                categories:[]\n              },\n            // series: [\n            //   {\n            //     data: []\n            //   }\n            // ]\n            \n          }\n        };\n       \n\n          // Create a JSON object to store the chart configurations\n\n    }\n\n    componentDidMount() {\n        this.onFetchData();\n        const lat = this.props.location.state.lat\n        const lon = this.props.location.state.lon\n\n        axios\n        .get(\n          \"https://api.openweathermap.org/data/2.5/onecall?lat=\" +\n            lat+\n            \"&lon=\" +\n           lon + \"&exclude=\"+\n            \"&APPID=\" +\n            this.state.appId + \"&units=metric\"\n        ).then(response =>{\n          this.setState({dailyData:response.data.current});\n        \n          \n          let newArray = {...this.state.options.chart}\n          let newArray1 = {...this.state.options.title}\n          console.log(newArray,newArray1)\n        // const options = {...this.state};\n        // console.log('nn',options)\n        // const options1 = {...options.options};\n        // console.log('nn1',options1)\n        // const options3 = {...options1.series};\n        // console.log('nn1',options3)\n        // const options4 = {...options3.data};\n        // console.log('nn1',options4)\n        \n        //this.setState({});\n        //   const newAccess1 = {...this.state.xAxis};\n          //const newAccess2 = {...newAccess.series};\n          //const newAccess3 = {...newAccess2.data};\n          //console.log(newAccess2,newAccess3)\n//newAccess1.categories = response.data.hourly;\nconst newarr = {...this.state.series}\nconst newarr1 = {...newarr.data}\nconsole.log(newarr,newarr1,'fe')\n        //   this.setState({options.xAxis.categories:response.data.hourly});\n    const info=response.data.hourly.map((girl) => girl.temp.toFixed());\n    console.log(info)\n    //this.setState({newarr:info})\n     const info2 = [{...newarr},info]\n     this.setState({newarr1:info})\n    console.log(this.state.series.data)\n    //const info2 = [{...newArray},{...newArray1},info]\n    // this.setState({\n    //     todos: newArray,\n    //     });\n    // //options3 = info;\n    // this.setState({options3: info});\n    // //this.setState({options3: options4});\n    // this.setState({options1: options3});\n    // this.setState({options: options1});\n        //const info= response.data.hourly.map((girl) => girl.temp.toFixed());\n        // console.log('in',info)\n        // const info1 = [{...newAccess},info]\n        // console.log('iii',info1)\n        // this.setState({data: info});\n        //console.log(this.state.option3)\n        let _this = this;\n        _this.state.series[0].data = info;\n        })\n    }\n\n    onFetchData() {\n        console.log(dataFetch,schemaFetch)\n        Promise.all([dataFetch, schemaFetch]).then(res => {\n          const data = res[0];\n          const schema = res[1];\n          const fusionTable = new FusionCharts.DataStore().createDataTable(\n            data,\n            schema\n          );\n          const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n          timeseriesDs.dataSource.data = fusionTable;\n          this.setState({\n            timeseriesDs\n          });\n        });\n      }\n\n    render() {\n      return (\n          <div className=\"outer-div\">\n           {/* <ReactFC {...chartConfigs} /> */}\n           \n        <div className='dailycard-container temp_container'>\n       \n        <h2>{parseFloat(this.state.dailyData.temp).toFixed()}&#8451;</h2>\n        <div className=\"img-div\">\n          {/* {<img\n          alt='monster'\n          src={`http://openweathermap.org/img/w/${this.state.dailyData.weather[0].icon}.png`}\n        />} */}\n        <p><Moment unix format='ddd'>{this.state.dailyData.dt}</Moment></p>\n        </div>\n        <div className=\"info-div\">\n          <p>Latitude</p>\n          <h5>{this.props.location.state.lat}</h5>\n        </div>\n        <div className=\"info-div\">\n          <p>Longitude</p>\n          <h5>{this.props.location.state.lon}</h5>\n        </div>\n        <div className=\"info-div\">\n          <p>Pressure</p>\n          <h5>{this.state.dailyData.pressure} hpa</h5>\n        </div>\n        <div className=\"info-div\">\n          <p>Humidity</p>\n          <h5>{this.state.dailyData.humidity} %</h5>\n        </div>\n        <div>\n    {/* <HighchartsReact highcharts={Highcharts} \n    options={this.state.options}\n    chartData={this.state.series}\n     /> */}\n     {/* <ReactFC {...this.state.timeseriesDs} /> */}\n     <HighchartsWrapper\n        chartData={this.state.series}\n      />\n  </div>\n        \n        <div className=\"info-div\">\n          <p>Sunrise</p>\n          <h5><Moment unix format='h:mm a'>{this.state.dailyData.sunrise}</Moment></h5>\n        </div>\n        <div className=\"info-div\">\n          <p>Sunset</p>\n          <h5><Moment unix format='h:mm a'>{this.state.dailyData.sunset}</Moment></h5>\n        </div>\n    \n      </div>\n      </div>\n      );\n    }\n  }\n  \n  export default DailyData;\n"]},"metadata":{},"sourceType":"module"}